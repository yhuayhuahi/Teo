/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;
import org.example.clases.*;
import org.example.service.Register;
import java.util.*;

public class App {

    public static void main(String[] args) {
        System.out.println("SISTEMA DE GESTIÓN DE PARTICIPANTES - - - - - - - - \n");

        // Creación de participantes
        System.out.println("CREANDO PARTICIPANTES . . . . . . . . . . . . .. . \n");

        // Estudiantes
        Student student1 = new Student("María González", 20, "maria@estudiante.com", "111-1111", "Ingeniería de Sistemas", "7mo semestre");
        Student student2 = new Student("Carlos Pérez", 22, "carlos@estudiante.com", "111-2222", "Medicina", "9no semestre");

        // Profesores
        Professor prof1 = new Professor("Dr. Ana Rodríguez", 45, "ana@universidad.edu", "222-1111", "Facultad de Ingeniería", "Inteligencia Artificial");
        Professor prof2 = new Professor("Dr. Luis Martín", 50, "luis@universidad.edu", "222-2222", "Facultad de Medicina", "Cardiología");

        // Ponentes (Speakers)
        Speaker speaker1 = new Speaker("Roberto Silva", 35, "roberto@speaker.com", "333-1111", "Machine Learning en la Industria", 8, "Ponente Magistral");
        Speaker speaker2 = new Speaker("Laura Torres", 40, "laura@speaker.com", "333-2222", "Innovación en Salud Digital", 12, "Ponente Especialista");
        Speaker speaker3 = new Speaker("Diego Morales", 38, "diego@speaker.com", "333-3333", "Blockchain y Fintech", 10, "Ponente Invitado");

        // Comité Organizador
        OrganizingCommittee org1 = new OrganizingCommittee("Sandra López", 35, "sandra@comite.org", "444-1111", "Coordinadora General", "Gestión general del evento");
        OrganizingCommittee org2 = new OrganizingCommittee("Miguel Castro", 42, "miguel@comite.org", "444-2222", "Coordinador Técnico", "Gestión de tecnología y equipos");

        // Personal Administrativo
        Administrative admin1 = new Administrative("Elena Vargas", 28, "elena@admin.com", "555-1111", "Recursos Humanos", "5 años en gestión de eventos");
        Administrative admin2 = new Administrative("Pablo Jiménez", 32, "pablo@admin.com", "555-2222", "Logística", "8 años en coordinación de eventos");

        // Público General
        GeneralPublic public1 = new GeneralPublic("Ana Fernández", 25, "ana@publico.com", "666-1111", "Profesional independiente");
        GeneralPublic public2 = new GeneralPublic("José Ramírez", 30, "jose@publico.com", "666-2222", "Empresario");

        // Invitados
        Guest guest1 = new Guest("Isabella Costa", 45, "isabella@invitado.com", "777-1111");
        Guest guest2 = new Guest("Fernando Ruiz", 50, "fernando@invitado.com", "777-2222");

        // Demostrando la covarianza
        System.out.println("DEMOSTRANDO COVARIANZA <? extends Participant>");
        System.out.println("Podemos leer listas de cualquier subtipo de Participant . . . . . . . . . \n");

        // Lista de estudiantes
        List<Student> students = Arrays.asList(student1, student2);
        System.out.println("--- LISTA DE ESTUDIANTES ---");
        Register.printInformation(students);

        // Lista de profesores
        List<Professor> professors = Arrays.asList(prof1, prof2);
        System.out.println("--- LISTA DE PROFESORES ---");
        Register.printInformation(professors);

        // Lista de ponentes
        List<Speaker> speakers = Arrays.asList(speaker1, speaker2, speaker3);
        System.out.println("--- LISTA DE PONENTES ---");
        Register.printInformation(speakers);

        // Lista mixta de participantes
        List<Participant> allParticipants = Arrays.asList(
            student1, prof1, speaker1, org1, admin1, public1, guest1
        );
        System.out.println("--- LISTA MIXTA DE PARTICIPANTES ---");
        Register.printInformation(allParticipants);

        // Demostración de la contravarianza
        System.out.println("\nDEMOSTRANDO CONTRAVARIANZA <? super Speaker>");
        System.out.println("Podemos agregar Speakers a listas de cualquier supertipo . . . . . . . .  . . .. . . . . . .\n");

        // Lista de participantes (supertipo de Speaker)
        List<Participant> participantList = new ArrayList<>();
        participantList.add(student1);
        participantList.add(prof1);

        System.out.println("Lista inicial de participantes:");
        Register.printInformation(participantList);

        // Agregamos ponentes usando contravarianza
        List<Speaker> newSpeakers = Arrays.asList(speaker2, speaker3);
        System.out.println("Agregando nuevos ponentes a la lista de participantes...");
        Register.addPonentsToList(participantList, newSpeakers);

        System.out.println("\nLista final después de agregar ponentes:");
        Register.printInformation(participantList);

        // Ejemplo adicional de contravarianza
        System.out.println("\nEJEMPLO ADICIONAL - Agregando a lista específica de Speakers");

        List<Speaker> speakerList = new ArrayList<>();
        speakerList.add(speaker1);

        System.out.println("Lista inicial de ponentes:");
        Register.printInformation(speakerList);

        List<Speaker> moreSpeakers = Arrays.asList(speaker2);
        System.out.println("Agregando más ponentes...");
        Register.addPonentsToList(speakerList, moreSpeakers);

        System.out.println("\nLista final de ponentes:");
        Register.printInformation(speakerList);

        // Resumen final
        System.out.println("\nSistema de wildcards demostrado:");
        System.out.println("✓ Covarianza (? extends) - Lectura segura de subtipos");
        System.out.println("✓ Contravarianza (? super) - Escritura segura a supertipos");
        System.out.println("\nFIN DE LA DEMOSTRACION - - - - - - - - ");
    }
}
